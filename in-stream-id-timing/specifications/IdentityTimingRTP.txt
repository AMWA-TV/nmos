             NMOS Mapping of Identity and Timing Information to RTP
                         (DRAFT 06, January 2016)



1.  Scope

This specification describes a mapping of Source and Flow identifiers and PTP-derived
Grain timestamps to a Real-time Transport Protocol (RTP) [1] stream using the audio
and video conferences profile (AVP) [2] for the carriage of synchronised video data,
audio data, or other time-related data.

Source, Flow and Grain are as defined in the JT-NM Reference Architecture 1.0 [13],
also described infomatively in the NMOS Technical Overview.

Although uncompressed video and audio examples are presented, this specification
does NOT define a payload format, and is intended to be payload format agnostic.
As such, it can be applied to any payload format using the standard RTP header
structure.

2.  Grain (informative)

This specification uses the concept of a Grain to describe a unit of 
mono-essence video, audio or other time-related data.

A video Grain contains a single video frame.

An audio Grain contains audio sample data from one or more audio channels.

A data Grain contains generic time-related data.

All types of Grain contain intimate metadata that is associated with the Grain's
mono-essence payload, providing it with identity and timing.



3.  Payload Formats (informative)

By using RTP without modification to existing RFCs and by utilising SDP files to
describe these streams, the core NMOS RTP specification remains codec
agnostic. The following payload profiles are included as examples given their
simple uncompressed nature. Other payload profiles (and variants of the examples
below) are also supported, with reference to an appropriate external
specification.


3.1.  RFC 4175 RTP Format (informative)

RFC 4175 [3] defines a payloading format for the carriage of uncompressed video
over RTP. Both progressive and interlaced scanning are supported.


3.2.  Linear PCM RTP Format (informative)

RFC 3551 [2] and RFC 3190 [4] define payloading formats for L16 and L24
uncompressed audio.


4.  Network reference, media clock and RTP clock

The PTP (IEEE 1588-2008) [5] network reference is used to synchronize Grain
Flows.

The media clock for the payload is derived from PTP network reference. The
media clock shares the same epoch as the PTP network reference,
1970-01-01 00:00:00 TAI. The media clock tick count at the epoch is 0. The
payload media clocks are in-phase at the epoch.

The RTP clock, encoded in the timestamp field in the RTP header, is derived from
the media clock. The RTP clock rate for RFC 4175 video is 90kHz and for audio
48kHz (or the audio sample rate). This means for 25Hz video the RTP timestamp is
incremented by exactly 3600 for each video frame. For 48kHz audio the RTP
timestamp is incremented by exactly 1 for each audio sample.

The RTP clock has a fixed (random) offset with respect to the media clock. The
fixed offset is signalled in the SDP file (see section 7.3). The RTP timestamp
at the epoch equals the fixed offset.

The RTP clock is specific to a single RTP transmit session. A consequence of
this is that the RTP timestamp cannot be used to recover information about the
original sampling time of a Grain which transits multiple RTP sessions. The 
timestamps defined in section 5 are required for this purpose.

A transmitter can calculate the RTP timestamp (rtp_timestamp) from a PTP-derived
timestamp (ptp_sec/ptp_nano) as follows:

  1. convert the PTP-derived seconds and nanoseconds into RTP's clock rate
     (rtp_rate):
       ptp_rtp = (uint64_t)ptp_sec x rtp_rate + ptp_nano / 1000000000 x rtp_rate

  2. add the fixed offset to the timestamp
       rtp_timestamp = (uint32_t)(ptp_rtp + offset)

A receiver can calculate the PTP-derived timestamp (ptp_sec/ptp_nano) from the
RTP timestamp (rtp_timestamp) as follows:

  1. subtract the fixed offset from the rtp_timestamp (modulo 32 bits):
       rtp_ts_adj = (uint32_t)((uint64_t)rtp_timestamp + UINT32_MAX + 1 -
                               offset)

  2. get the current PTP seconds value using a local clock (ptp_sec). This
     value will only be used to get the upper 32 bits of the PTP-derived
     timestamp (at RTP clock rate) and therefore does not need to be accurate.

  3. convert ptp_sec to the RTP clock rate (rtp_rate):
       ptp_sec_rtp = (uint64_t)ptp_sec x rtp_rate

  4. account for transmission delays, PTP clock differences, etc. that may
     result in an off-by-1 error in the upper 32 bits in 5. below:
       error_comp = ((UINT32_MAX / 2) - (int64_t)rtp_ts_adj) / 2

  5. the PTP derived timestamp at RTP clock rate is a combination of the local
     value (upper 32 bits) plus the received RTP timestamp (lower 32 bits):
       ptp_rtp = ((ptp_sec_rtp + error_comp) & 0xffffffff00000000) |
                 rtp_ts_adj

  6. convert to PTP in seconds and nano-seconds:
       ptp_sec  = ptp_rtp / rtp_rate
       ptp_nano = 1000000000 x (ptp_rtp % rtp_rate) / rtp_rate



5.  Intimate Metadata RTP Format

A number of intimate metadata items are referenced in this specification:
 - PTP Sync (IEEE 1588-2008) Timestamp [5]
 - PTP Origin (IEEE 1588-2008) Timestamp [5]
 - SMPTE ST 12-1 (SMPTE 12M) Timecodes [6]
 - Flow Identifier
 - Source Identifier
 - Grain Duration

The Sync Timestamp provides an absolute capture or playback timestamp for the
Grain essence data. Two coincident audio and video Grains would share the same
Sync Timestamp, which remains associated with them as they pass through
processing devices.

The Origin Timestamp provides an absolute capture timestamp for the Grain
essence data. When capturing from a live source this should match the Sync
Timestamp. When replaying stored essence this will be populated from the Origin
Timestamp of the stored Grain.

SMPTE 12M Timecodes (e.g. LTC) are time labels for the Grain. The audio and
video data in coincident Grains typically have the same Timecodes. Timecode may
be omitted from Grains in cases where it is not available.

A Flow is a sequence of video or audio data with a fixed Source (uniquely
identified - see below) and encoding parameters. What is considered to be fixed
encoding parameters is beyond the scope of this specification. The Flow
Identifier is used to uniquely identify each Flow.

The Source Identifier uniquely identifies the Source for a Flow. What is
considered to be a Source (e.g. camera, SDI capture device) is beyond the scope
of this specification. A Source may have multiple Flows, each representing
different renditions of the Source data. E.g. a compressed flow will have the
same Source Identifier as an uncompressed Flow of the same Source data.

The Grain duration identifies the time period for which video essence within the
Grain should be displayed, or the time period within which the audio essence
should be played back. Data Grains may use the duration to signal a display
period or validity period as appropriate. Instantaneous Data Grains identifying
events should signal a duration of zero.



6.  RTP Stream

The RTP stream consists of a sequence of RTP packets. Each packet consists
of a header, optional header extensions and payload data.

The first and last packet of a Grain in an RTP stream contains header
extensions. The header extensions in the first packet include the intimate
metadata and the Grain flags. The last packet contains the Grain flags.


6.1.  RTP Packet Size

The RTP packet size must be limited to avoid IP datagram fragmentation. Packets
must not exceed the maximum transmission unit for Ethernet of 1500 bytes whether
using IPv4 or IPv6.

For IPv6, the maximum RTP packet size is 1452:
     1500 (Maximum Transmission Unit of Ethernet II)
    -  40 (Maximum fixed header size for IPv6)
    -   8 (UDP header size)
    = 1452 bytes

This means that the maximum header extensions and payload size for IPv6 is:
      1452 (Maximum packet size)
    -   12 (RTP header size)
    = 1440 bytes.

Given a maximum fixed header size of 20 bytes for IPv4, the maximum RTP packet
size for IPv4 is 1472 bytes, with 1460 bytes available for header extensions
and payload.


6.2.  RTP Packet Header

The RTP packet header consist of 12 bytes (excluding CSRC) and has the
following format:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |V=2|P|X|  CC   |M|     PT      |       sequence number         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                           timestamp                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           synchronisation source (SSRC) identifier            |
   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
   |            contributing source (CSRC) identifiers             |
   |                             ....                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


  version (V): 2 bits
    Value shall be 2.

  padding (P): 1 bit
    Padding is not used and is set to 0. Receivers shall process padding if
    present.

  extension (X): 1 bit
    Shall be set to 1 when header extensions are present, otherwise it is set
    to 0. Header extensions are present in the first and last packet of stream
    data that corresponds to the start and end of a Grain respectively.

  CSRC count (CC): 4 bits
    This field is not used and is set to 0. Receivers shall process CSRC if
    present.

  marker (M): 1 bit
    This field is set to 1 in the last packet of the video field or frame,
    otherwise it is set to 0. This bit is not used with audio and is set to 0.
    Note: the Grain Flags header extension provides a means to identify the
          last packet for both video and audio Grains.

  payload type (PT): 
    Set to the dynamic payload type value, 96-127. The payload type shall change
    when the encoding changes (e.g. when switching from RFC 4175 to RFC 3190).
    The mapping between payload type and encoding should be provided by an SDP
    file.

  sequence number: 16 bits
    Initial value shall be a random number. The sequence number is incremented
    by 1 for each packet, except when the SSRC identifier changes. The value
    shall be set to a new value when the SSRC identifier changes. The new value
    may be set to (old + 32768) % 65536 to still allow receivers to determine
    whether any packets were lost before the first new packet was received.

  timestamp: 32 bits
    The value shall be the lower 32 bits of the media clock tick count converted
    to RTP clock rate, plus a fixed (random) offset. See section 4 for more
    details. The fixed offset shall be reset to a new random number when the
    SSRC identifier changes.
     
  synchronisation source (SSRC) identifier: 32 bits
    Initial value shall be a random number. The value shall be reset to a new
    random number when the payload type changes or when a step change
    occurs in the source signal (e.g. SDI signal disruption, camera switched
    off/on). See also [12] for information about receivers supporting different
    SSRC identifiers in an RTP stream.


6.3.  RTP Packet Header Extensions

The following header extensions are defined in this specification:
  1. PTP Sync Timestamp
  2. PTP Origin Timestamp
  3. SMPTE ST 12-1 (SMPTE 12M) Timecodes
  4. Flow Identifier
  5. Source Identifier
  6. Grain Duration
  7. Grain Flags

Header extensions 1-7 are present in the first packet and 7 is present in the
last packet. Header extension 3 may be omitted entirely from the first packet
if no timecode is available.

The maximum additional size of the 7 header extensions listed above is 80 bytes
and for the 1 header extension in the last packet it is 8 bytes (which includes
2 padding bytes).


The one-byte header form of extension specified in [7] is used. This allows a
maximum individual extension size of 16 bytes excluding the header. The format
is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         identifier            |           length              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       header extensions                       |
   |                             ....                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  identifier: 16 bits
    The value shall be 0xBEDE. This identifies the one-byte header extension
    form specified in [7].

  length: 16 bits
    Equals the size of the header extensions in 32-bit units. The size does not
    include the 4 byte extension header.


The header extensions consists of extension data bytes and padding bytes. The
total header extensions size shall be a multiple of 4 bytes.

Zero or more padding bytes may be used between header extensions or at the
end of the header extensions. Padding is used to get the header extensions size
to be a multiple of 4 bytes. A padding byte is a zero byte.

Each extension starts with a one byte header using the following form:

    0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+
   |  id   |  len  |
   +-+-+-+-+-+-+-+-+

  identifier (id): 4 bits
     Local identifier for the extension. The value shall be 1-14.

  length (len): 4 bits
     Number of extension bytes minus 1. A value 0 therefore indicates that one
     byte of data follows.


The mapping between the local identifier and the header extension type should be
signalled using an SDP file and should not be assumed to match the numbering
identified above.


6.3.1.  PTP Sync Timestamp Header Extension

The PTP Sync timestamp consists of a 48-bit seconds field followed by a 32-bit
nano-second field. The length value in the extension header is 9.


6.3.2.  PTP Origin Timestamp Header Extension

The PTP Origin timestamp consists of a 48-bit seconds field followed by a 32-bit
nano-second field. The length value in the extension header is 9.


6.3.3.  SMPTE ST 12-1 (SMPTE 12M) Timecode Header Extension

The Timecode header extension is specified in [8]. The full format form is
used - see section 6.2 of [8]. The value is 8 bytes and therefore the length
value in the extension header is 7.


6.3.4.  Flow Identifier Header Extension
The Flow identifier is an UUID [9]. The value is 16 bytes and therefore the
length value in the extension header is 15.


6.3.5.  Source Identifier Header Extension

The Source identifier is an UUID [9]. The value is 16 bytes and therefore the
length value in the extension header is 15.


6.3.6.  Grain Duration Header Extension

The Grain duration is a rational consisting of a 4 byte numerator and 4 byte
denominator. The value is 8 bytes and therefore the length value in the
extension header is 7.


6.3.7.  Grain Flags Header Extension

The Grain Flags are a single byte with the following form:

    0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+
   |S|E| reserved  |
   +-+-+-+-+-+-+-+-+

  start flag (S): 1 bit
    This bit shall be set to 1 in the first packet of the Grain. Otherwise it
    shall be set to 0.

  end flag (E): 1 bit
    This bit shall be set to 1 in the last packet of the Grain. Otherwise it
    shall be set to 0.

  reserved: 6 bits
     These bits are reserved for future use and should be set to 0.

The length value in the extension header is 0.



7.  SDP

A Session Description Protocol (SDP) file [10] should be used to describe a
multimedia session. How the SDP file is accessed is beyond the scope of this
specification.


7.1.  Example: Describing RFC 4175 Video

RFC 4175 video is described using the following lines:

  m=video <port> RTP/AVP 112
  a=rtpmap:<pt> <format>/90000
  a=fmtp:<pt> sampling=YCbCr-4:2:2; width=1280; height=720; depth=10;
        colorimetry=BT.709-2; chroma-position=1

The first line identifies it to be video. The AVP [2] RTP profile is followed.
The <port> is the IP port number, e.g. 5004. The dynamic payload type <pt> is
the same payload type value that appears in the RTP packet header. The value is
96-127, e.g. 98.

The second line defines the <format> which in the case of RFC 4175 is raw. The
clock rate for the timestamp in the RTP packet header is 90 kHz.

The third line defines the RFC 4175 picture parameters, mapped to the payload
type <pt>.


7.2.  Example: Describing RFC 3190 Audio

RFC 3190 audio is described using the following lines:

  m=audio <port> RTP/AVP <pt>
  a=rtpmap:<pt> <format>/48000/2

The first line identifies it to be audio. The AVP [2] RTP profile is followed.
The <port> is the IP port number, e.g. 5006. The dynamic payload type <pt> is
the same payload type value that appears in the RTP packet header. The value is
96-127, e.g. 99.

The second line defines the <format> which in the case of RFC 3190 is L24. The
clock rate for the timestamp in the RTP packet header is 48 kHz. There are 2
audio channels in the RTP stream.


7.3.  Describing the clock source and media clock offset

The PTP clock source used to create the media clock is described using the
following line:

  a=ts-refclk:ptp=IEEE1588-2008:<ptp-gmid>

<ptp-gmid> is the globally unique PTP clock identity. See [11] for more details.

The RTP clock (RTP timestamp) offset with respect to the media clock at the
epoch is described using the following line:

  a=mediaclk:direct=<offset> [rate=<rate>]

The <offset> is a randomly generated value. The <offset> is at the RTP clock
rate, which is 90000 for RFC 4175 video and 48000 for RFC 3190 audio. An
optional rate specifier may be included as specified by [11] for rates
associated with NTSC video if a 90kHz RTP clock us not used.


7.4.  Describing the Header Extensions

The RTP header extensions are identified locally by a number 1-14. The SDP
file maps that session local identifier to a global reference that identifies
the extension type.


7.4.1. PTP Sync Timestamp

The PTP Sync Timestamp header extension is described using the following line:

  a=extmap:<id> urn:x-nmos:rtp-hdrext:sync-timestamp

The <id> is the session local identifier. See [7] for details. 


7.4.2. PTP Origin Timestamp

The PTP Origin Timestamp header extension is described using the following line:

  a=extmap:<id> urn:x-nmos:rtp-hdrext:origin-timestamp

The <id> is the session local identifier.


7.4.3.  SMPTE ST 12-1 (SMPTE 12M) Timecode Header Extension

The Timecode header extension is described using the following line:

  a=extmap:<id> urn:ietf:params:rtp-hdrext:smpte-tc <dur>@<rate>/<tc
      base>[/drop]

The <id> is the session local identifier. For RFC 4175 video the <rate> is 90000
and the <dur> equals 90000 / 25 = 3600 for 25 Hz timecode <rate>. For RFC 3190
audio the <rate> is 48000 and the <dur> equals 48000 / 25 = 1920 for 25 Hz
timecode <rate>.


7.4.4.  Flow Identifier Header Extension

The Flow Identifier header extension is described using the following line:

  a=extmap:<id> urn:x-nmos:rtp-hdrext:flow-id

The <id> is the session local identifier.


7.4.5.  Source Identifier Header Extension

The Source Identifier header extension is described using the following line:

  a=extmap:<id> urn:x-nmos:rtp-hdrext:source-id

The <id> is the session local identifier.


7.4.6.  Grain Duration Header Extension

The Grain Duration header extension is described using the following line:

  a=extmap:<id> urn:x-nmos:rtp-hdrext:grain-duration

The <id> is the session local identifier.


7.4.7.  Grain Flags Header Extension

The Grain Flags header extension is described using the following line:

  a=extmap:<id> urn:x-nmos:rtp-hdrext:grain-flags

The <id> is the session local identifier.


7.5.   Examples

An example SDP file is shown below for RFC 4175 1080i50 video:

  v=0
  o=- 1443716955 1443716955 IN IP4 172.29.82.50
  s=NMOS Stream
  t=0 0
  m=video 5000 RTP/AVP 96
  c=IN IP4 232.121.83.127/32
  a=source-filter:incl IN IP4 232.121.83.127 172.29.82.50
  a=rtpmap:96 raw/90000
  a=fmtp:96 sampling=YCbCr-4:2:2; width=1920; height=1080; depth=10;
      colorimetry=BT709-2; interlace=1
  a=mediaclk:direct=1119082333 rate=90000
  a=extmap:1 urn:x-nmos:rtp-hdrext:origin-timestamp
  a=extmap:2 urn:ietf:params:rtp-hdrext:smpte-tc 3600@90000/25
  a=extmap:3 urn:x-nmos:rtp-hdrext:flow-id
  a=extmap:4 urn:x-nmos:rtp-hdrext:source-id
  a=extmap:5 urn:x-nmos:rtp-hdrext:grain-flags
  a=extmap:7 urn:x-nmos:rtp-hdrext:sync-timestamp
  a=extmap:9 urn:x-nmos:rtp-hdrext:grain-duration
  a=ts-refclk:ptp=IEEE1588-2008:ec-46-70-ff-fe-00-42-c4


An example SDP file is shown below for RFC 3190 2 channel audio:

  v=0
  o=- 1443080730 1443080730 IN IP4 172.29.80.68
  s=NMOS Stream
  t=0 0
  m=audio 5000 RTP/AVP 98
  c=IN IP4 232.226.253.166/32
  a=source-filter:incl IN IP4 232.226.253.166 172.29.80.68
  a=rtpmap:98 L24/48000/2
  a=control:trackID=1
  a=mediaclk:direct=1970351840 rate=48000
  a=extmap:1 urn:x-nmos:rtp-hdrext:origin-timestamp
  a=extmap:2 urn:ietf:params:rtp-hdrext:smpte-tc 1920@48000/25
  a=extmap:3 urn:x-nmos:rtp-hdrext:flow-id
  a=extmap:4 urn:x-nmos:rtp-hdrext:source-id
  a=extmap:5 urn:x-nmos:rtp-hdrext:grain-flags
  a=extmap:7 urn:x-nmos:rtp-hdrext:sync-timestamp
  a=extmap:9 urn:x-nmos:rtp-hdrext:grain-duration
  a=ts-refclk:ptp=IEEE1588-2008:ec-46-70-ff-fe-00-42-c4



8.  References

[1]    RFC 3550, Realtime Transport Protocol (RTP)

[2]    RFC 3551, RTP profile, Audio and Video Conferences with Minimal Control

[3]    RFC 4175, RTP Payload Format for Uncompressed Video

[4]    RFC 3190, RTP Payload Format for 12-bit DAT Audio and 20- and 24-bit
       Linear Sampled Audio

[5]   IEEE 1588-2008 - IEEE Standard for a Precision Clock Synchronization
       Protocol for Networked Measurement and Control Systems

[6]   SMPTE ST 12-1, Time and Control Code, 2008

[7]   RFC 5285, A General Mechanism for RTP Header Extensions

[8]   RFC 5484, Associating Time-Codes with RTP Streams

[9]   RFC 4122, A Universally Unique IDentifier (UUID) URN Namespace

[10]   RFC 4566, SDP: Session Description Protocol

[11]   RFC 7273,  RTP Clock Source Signalling

[12]   Multiple SSRC Signalling, draft-westerlund-avtcore-max-ssrc-02.txt

[13]   Joint Task Force for Networked Media Reference Architecture 1.0 (jt-nm.org)
